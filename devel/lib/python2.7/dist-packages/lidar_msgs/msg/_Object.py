# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_msgs/Object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lidar_msgs.msg

class Object(genpy.Message):
  _md5sum = "be0179af1f0ec1bf6324c4d7897b9aac"
  _type = "lidar_msgs/Object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
Point3 center
Point3 size
Point2 velocity
Point2[] corners
Point2[] contours
int16 id

float64[36] predict_covariance



================================================================================
MSG: lidar_msgs/Point3
float32 x
float32 y
float32 z
================================================================================
MSG: lidar_msgs/Point2
float32 x
float32 y
"""
  __slots__ = ['center','size','velocity','corners','contours','id','predict_covariance']
  _slot_types = ['lidar_msgs/Point3','lidar_msgs/Point3','lidar_msgs/Point2','lidar_msgs/Point2[]','lidar_msgs/Point2[]','int16','float64[36]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,size,velocity,corners,contours,id,predict_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = lidar_msgs.msg.Point3()
      if self.size is None:
        self.size = lidar_msgs.msg.Point3()
      if self.velocity is None:
        self.velocity = lidar_msgs.msg.Point2()
      if self.corners is None:
        self.corners = []
      if self.contours is None:
        self.contours = []
      if self.id is None:
        self.id = 0
      if self.predict_covariance is None:
        self.predict_covariance = [0.] * 36
    else:
      self.center = lidar_msgs.msg.Point3()
      self.size = lidar_msgs.msg.Point3()
      self.velocity = lidar_msgs.msg.Point2()
      self.corners = []
      self.contours = []
      self.id = 0
      self.predict_covariance = [0.] * 36

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.center.x, _x.center.y, _x.center.z, _x.size.x, _x.size.y, _x.size.z, _x.velocity.x, _x.velocity.y))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      buff.write(_get_struct_h().pack(self.id))
      buff.write(_get_struct_36d().pack(*self.predict_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.center is None:
        self.center = lidar_msgs.msg.Point3()
      if self.size is None:
        self.size = lidar_msgs.msg.Point3()
      if self.velocity is None:
        self.velocity = lidar_msgs.msg.Point2()
      if self.corners is None:
        self.corners = None
      if self.contours is None:
        self.contours = None
      end = 0
      _x = self
      start = end
      end += 32
      (_x.center.x, _x.center.y, _x.center.z, _x.size.x, _x.size.y, _x.size.z, _x.velocity.x, _x.velocity.y,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = lidar_msgs.msg.Point2()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = lidar_msgs.msg.Point2()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contours.append(val1)
      start = end
      end += 2
      (self.id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 288
      self.predict_covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.center.x, _x.center.y, _x.center.z, _x.size.x, _x.size.y, _x.size.z, _x.velocity.x, _x.velocity.y))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      buff.write(_get_struct_h().pack(self.id))
      buff.write(self.predict_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.center is None:
        self.center = lidar_msgs.msg.Point3()
      if self.size is None:
        self.size = lidar_msgs.msg.Point3()
      if self.velocity is None:
        self.velocity = lidar_msgs.msg.Point2()
      if self.corners is None:
        self.corners = None
      if self.contours is None:
        self.contours = None
      end = 0
      _x = self
      start = end
      end += 32
      (_x.center.x, _x.center.y, _x.center.z, _x.size.x, _x.size.y, _x.size.z, _x.velocity.x, _x.velocity.y,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = lidar_msgs.msg.Point2()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = lidar_msgs.msg.Point2()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contours.append(val1)
      start = end
      end += 2
      (self.id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 288
      self.predict_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
