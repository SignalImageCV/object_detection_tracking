# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tracking_msgs/DetectedObject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import geometry_msgs.msg
import tracking_msgs.msg
import std_msgs.msg

class DetectedObject(genpy.Message):
  _md5sum = "3bb4fe37c8503c462e32fc28f14a183e"
  _type = "tracking_msgs/DetectedObject"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header

uint32                          id
string                          label
float32                         score   #Score as defined by the detection, Optional
std_msgs/ColorRGBA              color   # Define this object specific color
bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering

################ 3D BB
string                          space_frame #3D Space coordinate frame of the object, required if pose and dimensions are defines
geometry_msgs/Pose              pose
geometry_msgs/Vector3           dimensions
geometry_msgs/Vector3           variance
geometry_msgs/Twist             velocity
geometry_msgs/Twist             acceleration

sensor_msgs/PointCloud2         pointcloud

geometry_msgs/PolygonStamped    convex_hull

tracking_msgs/LaneArray         candidate_trajectoriess

bool                            pose_reliable
bool                            velocity_reliable
bool                            acceleration_reliable

############### 2D Rect
# string                          image_frame # Image coordinate Frame,        Required if x,y,w,h defined
# int32                           x           # X coord in image space(pixel) of the initial point of the Rect
# int32                           y           # Y coord in image space(pixel) of the initial point of the Rect
int32                           width       # Width of the Rect in pixels
int32                           height      # Height of the Rect in pixels
float32                         angle       # Angle [0 to 2*PI), allow rotated rects

# sensor_msgs/Image               roi_image

############### Indicator information
# uint8                          indicator_state # INDICATOR_LEFT = 0, INDICATOR_RIGHT = 1, INDICATOR_BOTH = 2, INDICATOR_NONE = 3

############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6

#
# string[]                        user_defined_info

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: tracking_msgs/LaneArray
int32 id
Lane[] lanes

================================================================================
MSG: tracking_msgs/Lane
Header header
int32 increment
int32 lane_id
Waypoint[] waypoints

uint32 lane_index
float32 cost
float32 closest_object_distance
float32 closest_object_velocity
bool is_blocked

================================================================================
MSG: tracking_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
DTLane dtlane
int32 change_flag
WaypointState wpstate

uint32 lane_id
uint32 left_lane_id
uint32 right_lane_id
uint32 stop_line_id
float32 cost
float32 time_cost

# Lane Direction
# FORWARD				= 0
# FORWARD_LEFT	 		= 1
# FORWARD_RIGHT			= 2
# BACKWARD				= 3 
# BACKWARD_LEFT			= 4
# BACKWARD_RIGHT		= 5
# STANDSTILL	 		= 6
uint32 direction
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: tracking_msgs/DTLane
float64 dist
float64 dir
float64 apara
float64 r
float64 slope
float64 cant
float64 lw
float64 rw

================================================================================
MSG: tracking_msgs/WaypointState
int32 aid
uint8 NULLSTATE=0

# lanechange
uint8 lanechange_state

# bilinker
uint8 steering_state
uint8 STR_LEFT=1
uint8 STR_RIGHT=2
uint8 STR_STRAIGHT=3
uint8 STR_BACK=4

uint8 accel_state

uint8 stop_state
# 1 is stopline, 2 is stop which can only be released manually.
uint8 TYPE_STOPLINE=1
uint8 TYPE_STOP=2

uint8 event_state
uint8 TYPE_EVENT_NULL = 0
uint8 TYPE_EVENT_GOAL = 1
uint8 TYPE_EVENT_MIDDLE_GOAL = 2
uint8 TYPE_EVENT_POSITION_STOP = 3
uint8 TYPE_EVENT_BUS_STOP = 4
uint8 TYPE_EVENT_PARKING = 5
"""
  __slots__ = ['header','id','label','score','color','valid','space_frame','pose','dimensions','variance','velocity','acceleration','pointcloud','convex_hull','candidate_trajectoriess','pose_reliable','velocity_reliable','acceleration_reliable','width','height','angle','behavior_state']
  _slot_types = ['std_msgs/Header','uint32','string','float32','std_msgs/ColorRGBA','bool','string','geometry_msgs/Pose','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Twist','geometry_msgs/Twist','sensor_msgs/PointCloud2','geometry_msgs/PolygonStamped','tracking_msgs/LaneArray','bool','bool','bool','int32','int32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,label,score,color,valid,space_frame,pose,dimensions,variance,velocity,acceleration,pointcloud,convex_hull,candidate_trajectoriess,pose_reliable,velocity_reliable,acceleration_reliable,width,height,angle,behavior_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.label is None:
        self.label = ''
      if self.score is None:
        self.score = 0.
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.valid is None:
        self.valid = False
      if self.space_frame is None:
        self.space_frame = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      if self.candidate_trajectoriess is None:
        self.candidate_trajectoriess = tracking_msgs.msg.LaneArray()
      if self.pose_reliable is None:
        self.pose_reliable = False
      if self.velocity_reliable is None:
        self.velocity_reliable = False
      if self.acceleration_reliable is None:
        self.acceleration_reliable = False
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.angle is None:
        self.angle = 0.
      if self.behavior_state is None:
        self.behavior_state = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.label = ''
      self.score = 0.
      self.color = std_msgs.msg.ColorRGBA()
      self.valid = False
      self.space_frame = ''
      self.pose = geometry_msgs.msg.Pose()
      self.dimensions = geometry_msgs.msg.Vector3()
      self.variance = geometry_msgs.msg.Vector3()
      self.velocity = geometry_msgs.msg.Twist()
      self.acceleration = geometry_msgs.msg.Twist()
      self.pointcloud = sensor_msgs.msg.PointCloud2()
      self.convex_hull = geometry_msgs.msg.PolygonStamped()
      self.candidate_trajectoriess = tracking_msgs.msg.LaneArray()
      self.pose_reliable = False
      self.velocity_reliable = False
      self.acceleration_reliable = False
      self.width = 0
      self.height = 0
      self.angle = 0.
      self.behavior_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.id))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5fB().pack(_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid))
      _x = self.space_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_25d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.variance.x, _x.variance.y, _x.variance.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs))
      _x = self.pointcloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pointcloud.height, _x.pointcloud.width))
      length = len(self.pointcloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointcloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step))
      _x = self.pointcloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.pointcloud.is_dense, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.candidate_trajectoriess.id))
      length = len(self.candidate_trajectoriess.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.candidate_trajectoriess.lanes:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v3 = val2.pose
          _v4 = _v3.header
          buff.write(_get_struct_I().pack(_v4.seq))
          _v5 = _v4.stamp
          _x = _v5
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v4.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v6 = _v3.pose
          _v7 = _v6.position
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = _v6.orientation
          _x = _v8
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v9 = val2.twist
          _v10 = _v9.header
          buff.write(_get_struct_I().pack(_v10.seq))
          _v11 = _v10.stamp
          _x = _v11
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v10.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v12 = _v9.twist
          _v13 = _v12.linear
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = _v12.angular
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val2.dtlane
          _x = _v15
          buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
          buff.write(_get_struct_i().pack(val2.change_flag))
          _v16 = val2.wpstate
          _x = _v16
          buff.write(_get_struct_i5B().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state))
          _x = val2
          buff.write(_get_struct_4I2fI().pack(_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction))
        _x = val1
        buff.write(_get_struct_I3fB().pack(_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked))
      _x = self
      buff.write(_get_struct_3B2ifB().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.width, _x.height, _x.angle, _x.behavior_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      if self.candidate_trajectoriess is None:
        self.candidate_trajectoriess = tracking_msgs.msg.LaneArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid,) = _get_struct_5fB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.space_frame = str[start:end].decode('utf-8')
      else:
        self.space_frame = str[start:end]
      _x = self
      start = end
      end += 212
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.variance.x, _x.variance.y, _x.variance.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs,) = _get_struct_25d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointcloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pointcloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointcloud.height, _x.pointcloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointcloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pointcloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pointcloud.is_bigendian = bool(self.pointcloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pointcloud.is_dense, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.pointcloud.is_dense = bool(self.pointcloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      start = end
      end += 4
      (self.candidate_trajectoriess.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.candidate_trajectoriess.lanes = []
      for i in range(0, length):
        val1 = tracking_msgs.msg.Lane()
        _v17 = val1.header
        start = end
        end += 4
        (_v17.seq,) = _get_struct_I().unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8')
        else:
          _v17.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = tracking_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v19 = val2.pose
          _v20 = _v19.header
          start = end
          end += 4
          (_v20.seq,) = _get_struct_I().unpack(str[start:end])
          _v21 = _v20.stamp
          _x = _v21
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v20.frame_id = str[start:end].decode('utf-8')
          else:
            _v20.frame_id = str[start:end]
          _v22 = _v19.pose
          _v23 = _v22.position
          _x = _v23
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v24 = _v22.orientation
          _x = _v24
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v25 = val2.twist
          _v26 = _v25.header
          start = end
          end += 4
          (_v26.seq,) = _get_struct_I().unpack(str[start:end])
          _v27 = _v26.stamp
          _x = _v27
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v26.frame_id = str[start:end].decode('utf-8')
          else:
            _v26.frame_id = str[start:end]
          _v28 = _v25.twist
          _v29 = _v28.linear
          _x = _v29
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v30 = _v28.angular
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31 = val2.dtlane
          _x = _v31
          start = end
          end += 64
          (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (val2.change_flag,) = _get_struct_i().unpack(str[start:end])
          _v32 = val2.wpstate
          _x = _v32
          start = end
          end += 9
          (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state,) = _get_struct_i5B().unpack(str[start:end])
          _x = val2
          start = end
          end += 28
          (_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction,) = _get_struct_4I2fI().unpack(str[start:end])
          val1.waypoints.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked,) = _get_struct_I3fB().unpack(str[start:end])
        val1.is_blocked = bool(val1.is_blocked)
        self.candidate_trajectoriess.lanes.append(val1)
      _x = self
      start = end
      end += 16
      (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.width, _x.height, _x.angle, _x.behavior_state,) = _get_struct_3B2ifB().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.id))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5fB().pack(_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid))
      _x = self.space_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_25d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.variance.x, _x.variance.y, _x.variance.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs))
      _x = self.pointcloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pointcloud.height, _x.pointcloud.width))
      length = len(self.pointcloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointcloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step))
      _x = self.pointcloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.pointcloud.is_dense, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.candidate_trajectoriess.id))
      length = len(self.candidate_trajectoriess.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.candidate_trajectoriess.lanes:
        _v33 = val1.header
        buff.write(_get_struct_I().pack(_v33.seq))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v35 = val2.pose
          _v36 = _v35.header
          buff.write(_get_struct_I().pack(_v36.seq))
          _v37 = _v36.stamp
          _x = _v37
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v36.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v38 = _v35.pose
          _v39 = _v38.position
          _x = _v39
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v40 = _v38.orientation
          _x = _v40
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v41 = val2.twist
          _v42 = _v41.header
          buff.write(_get_struct_I().pack(_v42.seq))
          _v43 = _v42.stamp
          _x = _v43
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v42.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v44 = _v41.twist
          _v45 = _v44.linear
          _x = _v45
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v46 = _v44.angular
          _x = _v46
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v47 = val2.dtlane
          _x = _v47
          buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
          buff.write(_get_struct_i().pack(val2.change_flag))
          _v48 = val2.wpstate
          _x = _v48
          buff.write(_get_struct_i5B().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state))
          _x = val2
          buff.write(_get_struct_4I2fI().pack(_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction))
        _x = val1
        buff.write(_get_struct_I3fB().pack(_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked))
      _x = self
      buff.write(_get_struct_3B2ifB().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.width, _x.height, _x.angle, _x.behavior_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.variance is None:
        self.variance = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      if self.candidate_trajectoriess is None:
        self.candidate_trajectoriess = tracking_msgs.msg.LaneArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid,) = _get_struct_5fB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.space_frame = str[start:end].decode('utf-8')
      else:
        self.space_frame = str[start:end]
      _x = self
      start = end
      end += 212
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.variance.x, _x.variance.y, _x.variance.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs,) = _get_struct_25d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointcloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pointcloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointcloud.height, _x.pointcloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointcloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pointcloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pointcloud.is_bigendian = bool(self.pointcloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pointcloud.is_dense, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.pointcloud.is_dense = bool(self.pointcloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      start = end
      end += 4
      (self.candidate_trajectoriess.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.candidate_trajectoriess.lanes = []
      for i in range(0, length):
        val1 = tracking_msgs.msg.Lane()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8')
        else:
          _v49.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = tracking_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v51 = val2.pose
          _v52 = _v51.header
          start = end
          end += 4
          (_v52.seq,) = _get_struct_I().unpack(str[start:end])
          _v53 = _v52.stamp
          _x = _v53
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v52.frame_id = str[start:end].decode('utf-8')
          else:
            _v52.frame_id = str[start:end]
          _v54 = _v51.pose
          _v55 = _v54.position
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = _v54.orientation
          _x = _v56
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v57 = val2.twist
          _v58 = _v57.header
          start = end
          end += 4
          (_v58.seq,) = _get_struct_I().unpack(str[start:end])
          _v59 = _v58.stamp
          _x = _v59
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v58.frame_id = str[start:end].decode('utf-8')
          else:
            _v58.frame_id = str[start:end]
          _v60 = _v57.twist
          _v61 = _v60.linear
          _x = _v61
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v62 = _v60.angular
          _x = _v62
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v63 = val2.dtlane
          _x = _v63
          start = end
          end += 64
          (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (val2.change_flag,) = _get_struct_i().unpack(str[start:end])
          _v64 = val2.wpstate
          _x = _v64
          start = end
          end += 9
          (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stop_state, _x.event_state,) = _get_struct_i5B().unpack(str[start:end])
          _x = val2
          start = end
          end += 28
          (_x.lane_id, _x.left_lane_id, _x.right_lane_id, _x.stop_line_id, _x.cost, _x.time_cost, _x.direction,) = _get_struct_4I2fI().unpack(str[start:end])
          val1.waypoints.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.lane_index, _x.cost, _x.closest_object_distance, _x.closest_object_velocity, _x.is_blocked,) = _get_struct_I3fB().unpack(str[start:end])
        val1.is_blocked = bool(val1.is_blocked)
        self.candidate_trajectoriess.lanes.append(val1)
      _x = self
      start = end
      end += 16
      (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable, _x.width, _x.height, _x.angle, _x.behavior_state,) = _get_struct_3B2ifB().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_4I2fI = None
def _get_struct_4I2fI():
    global _struct_4I2fI
    if _struct_4I2fI is None:
        _struct_4I2fI = struct.Struct("<4I2fI")
    return _struct_4I2fI
_struct_3B2ifB = None
def _get_struct_3B2ifB():
    global _struct_3B2ifB
    if _struct_3B2ifB is None:
        _struct_3B2ifB = struct.Struct("<3B2ifB")
    return _struct_3B2ifB
_struct_5fB = None
def _get_struct_5fB():
    global _struct_5fB
    if _struct_5fB is None:
        _struct_5fB = struct.Struct("<5fB")
    return _struct_5fB
_struct_i5B = None
def _get_struct_i5B():
    global _struct_i5B
    if _struct_i5B is None:
        _struct_i5B = struct.Struct("<i5B")
    return _struct_i5B
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_25d3I = None
def _get_struct_25d3I():
    global _struct_25d3I
    if _struct_25d3I is None:
        _struct_25d3I = struct.Struct("<25d3I")
    return _struct_25d3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_I3fB = None
def _get_struct_I3fB():
    global _struct_I3fB
    if _struct_I3fB is None:
        _struct_I3fB = struct.Struct("<I3fB")
    return _struct_I3fB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
