// Generated by gencpp from file lidar_msgs/Object.msg
// DO NOT EDIT!


#ifndef LIDAR_MSGS_MESSAGE_OBJECT_H
#define LIDAR_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar_msgs/Point3.h>
#include <lidar_msgs/Point3.h>
#include <lidar_msgs/Point2.h>
#include <lidar_msgs/Point2.h>
#include <lidar_msgs/Point2.h>

namespace lidar_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : center()
    , size()
    , velocity()
    , corners()
    , contours()
    , id(0)
    , predict_covariance()  {
      predict_covariance.assign(0.0);
  }
  Object_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , size(_alloc)
    , velocity(_alloc)
    , corners(_alloc)
    , contours(_alloc)
    , id(0)
    , predict_covariance()  {
  (void)_alloc;
      predict_covariance.assign(0.0);
  }



   typedef  ::lidar_msgs::Point3_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::lidar_msgs::Point3_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::lidar_msgs::Point2_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef std::vector< ::lidar_msgs::Point2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lidar_msgs::Point2_<ContainerAllocator> >::other >  _corners_type;
  _corners_type corners;

   typedef std::vector< ::lidar_msgs::Point2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lidar_msgs::Point2_<ContainerAllocator> >::other >  _contours_type;
  _contours_type contours;

   typedef int16_t _id_type;
  _id_type id;

   typedef boost::array<double, 36>  _predict_covariance_type;
  _predict_covariance_type predict_covariance;





  typedef boost::shared_ptr< ::lidar_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::lidar_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::lidar_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::lidar_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lidar_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lidar_msgs': ['/home/jing/combine_ws/src/lidar_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be0179af1f0ec1bf6324c4d7897b9aac";
  }

  static const char* value(const ::lidar_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe0179af1f0ec1bfULL;
  static const uint64_t static_value2 = 0x6324c4d7897b9aacULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_msgs/Object";
  }

  static const char* value(const ::lidar_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
Point3 center\n\
Point3 size\n\
Point2 velocity\n\
Point2[] corners\n\
Point2[] contours\n\
int16 id\n\
\n\
float64[36] predict_covariance\n\
\n\
\n\
\n\
================================================================================\n\
MSG: lidar_msgs/Point3\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: lidar_msgs/Point2\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::lidar_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.size);
      stream.next(m.velocity);
      stream.next(m.corners);
      stream.next(m.contours);
      stream.next(m.id);
      stream.next(m.predict_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::lidar_msgs::Point3_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::lidar_msgs::Point3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::lidar_msgs::Point2_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "corners[]" << std::endl;
    for (size_t i = 0; i < v.corners.size(); ++i)
    {
      s << indent << "  corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lidar_msgs::Point2_<ContainerAllocator> >::stream(s, indent + "    ", v.corners[i]);
    }
    s << indent << "contours[]" << std::endl;
    for (size_t i = 0; i < v.contours.size(); ++i)
    {
      s << indent << "  contours[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lidar_msgs::Point2_<ContainerAllocator> >::stream(s, indent + "    ", v.contours[i]);
    }
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "predict_covariance[]" << std::endl;
    for (size_t i = 0; i < v.predict_covariance.size(); ++i)
    {
      s << indent << "  predict_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.predict_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MSGS_MESSAGE_OBJECT_H
